/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LeaderboardImport } from './routes/leaderboard'
import { Route as IndexImport } from './routes/index'
import { Route as LeaderboardIndexImport } from './routes/leaderboard/index'
import { Route as LeaderboardTopReportsImport } from './routes/leaderboard/top-reports'

// Create/Update Routes

const LeaderboardRoute = LeaderboardImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LeaderboardIndexRoute = LeaderboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LeaderboardRoute,
} as any)

const LeaderboardTopReportsRoute = LeaderboardTopReportsImport.update({
  id: '/top-reports',
  path: '/top-reports',
  getParentRoute: () => LeaderboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardImport
      parentRoute: typeof rootRoute
    }
    '/leaderboard/top-reports': {
      id: '/leaderboard/top-reports'
      path: '/top-reports'
      fullPath: '/leaderboard/top-reports'
      preLoaderRoute: typeof LeaderboardTopReportsImport
      parentRoute: typeof LeaderboardImport
    }
    '/leaderboard/': {
      id: '/leaderboard/'
      path: '/'
      fullPath: '/leaderboard/'
      preLoaderRoute: typeof LeaderboardIndexImport
      parentRoute: typeof LeaderboardImport
    }
  }
}

// Create and export the route tree

interface LeaderboardRouteChildren {
  LeaderboardTopReportsRoute: typeof LeaderboardTopReportsRoute
  LeaderboardIndexRoute: typeof LeaderboardIndexRoute
}

const LeaderboardRouteChildren: LeaderboardRouteChildren = {
  LeaderboardTopReportsRoute: LeaderboardTopReportsRoute,
  LeaderboardIndexRoute: LeaderboardIndexRoute,
}

const LeaderboardRouteWithChildren = LeaderboardRoute._addFileChildren(
  LeaderboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRouteWithChildren
  '/leaderboard/top-reports': typeof LeaderboardTopReportsRoute
  '/leaderboard/': typeof LeaderboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaderboard/top-reports': typeof LeaderboardTopReportsRoute
  '/leaderboard': typeof LeaderboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/leaderboard': typeof LeaderboardRouteWithChildren
  '/leaderboard/top-reports': typeof LeaderboardTopReportsRoute
  '/leaderboard/': typeof LeaderboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/leaderboard' | '/leaderboard/top-reports' | '/leaderboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leaderboard/top-reports' | '/leaderboard'
  id:
    | '__root__'
    | '/'
    | '/leaderboard'
    | '/leaderboard/top-reports'
    | '/leaderboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeaderboardRoute: typeof LeaderboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardRoute: LeaderboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leaderboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx",
      "children": [
        "/leaderboard/top-reports",
        "/leaderboard/"
      ]
    },
    "/leaderboard/top-reports": {
      "filePath": "leaderboard/top-reports.tsx",
      "parent": "/leaderboard"
    },
    "/leaderboard/": {
      "filePath": "leaderboard/index.tsx",
      "parent": "/leaderboard"
    }
  }
}
ROUTE_MANIFEST_END */
